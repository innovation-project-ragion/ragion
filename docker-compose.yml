services:
  app:
    container_name: multimodal_rag_app
    image: multimodal_rag_app
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # FastAPI port
      - "8501:8501" # Streamlit port
    volumes:
      - .:/src
    tty: true
    depends_on:
      - standalone
      - neo4j
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - FASTAPI_PORT=8000
      - STREAMLIT_PORT=8501
      - HOST=0.0.0.0
      - BACKEND_URL=http://localhost:8000
      - ENVIRONMENT=development
    networks:
      - app_network

  neo4j:
    image: neo4j:4.4.10
    container_name: neo4j
    ports:
      - "7474:7474" # Neo4j Browser
      - "7687:7687" # Neo4j Bolt protocol
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - neo4j_data:/data
    networks:
      - app_network

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    ports:
      - "9005:9005"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:latest
    command: [ "milvus", "run", "standalone" ]
    environment:
      - ETCD_ENDPOINTS=${ETCD_ENDPOINTS}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530" # Milvus API port
      - "9091:9091" # Milvus health check port
    depends_on:
      - etcd
      - minio
    networks:
      - app_network

  attu:
    image: zilliz/attu:latest
    container_name: attu
    ports:
      - "3000:3000"
    environment:
      - MILVUS_URL=http://standalone:19530
    depends_on:
      - standalone
    volumes:
      - attu_data:/data
    networks:
      - app_network

  jupyter:
    build:
      context: .
      dockerfile: jupyter/Dockerfile
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
    volumes:
      - .:/home/jovyan/work
    networks:
      - app_network

volumes:
  neo4j_data:
  etcd_data:
  minio_data:
  milvus_data:
  attu_data:
  jupyter_data:


networks:
  app_network:
    driver: bridge
