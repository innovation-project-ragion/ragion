services:
  app:
    build: .
    container_name: multimodal_rag_app
    image: multimodal_rag_app
    ports:
      - "8000:8000"
      - "5678:5678"
    volumes:
      - .:/src
    networks:
      - app_network
    depends_on:
      - ollama
      - standalone
      - neo4j

  openwebui:
    image: ghcr.io/open-webui/open-webui:ollama
    container_name: open_webui
    ports:
      - "3000:8080"  # Expose the Open WebUI on port 3000
    volumes:
      - open-webui:/app/backend/data  # Persist data for Open WebUI
      - ollama:/root/.ollama
    restart: always
    environment:
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - WEBUI_AUTH=false
      - OLLAMA_BASE_URL=http://ollama:11434
    depends_on:
      - ollama  # Open WebUI depends on Ollama
    networks:
      - app_network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama:/models  # Volume for persisting models in Ollama
    entrypoint: ["ollama", "serve"]
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_PORT=11434
    networks:
      - app_network

  neo4j:
    image: neo4j:4.4.10
    container_name: neo4j
    ports:
      - "7474:7474"  # Neo4j Browser
      - "7687:7687"  # Neo4j Bolt protocol
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}  # Load Neo4j credentials from .env file
    volumes:
      - neo4j_data:/data  # Persist Neo4j data
    networks:
      - app_network

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd  # Persist etcd data
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data  # Persist MinIO data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.9
    command: ["milvus", "run", "standalone"]
    environment:
      - ETCD_ENDPOINTS=${ETCD_ENDPOINTS}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
    volumes:
      - milvus_data:/var/lib/milvus  # Persist Milvus data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"  # Milvus API port
      - "9091:9091"    # Milvus health check port
    depends_on:
      - etcd
      - minio
    networks:
      - app_network

volumes:
  open-webui:   # Volume for Open WebUI to store data
  ollama:       # Volume for Ollama models
  neo4j_data:   # Volume for Neo4j data
  etcd_data:    # Volume for etcd data
  minio_data:   # Volume for MinIO data
  milvus_data:  # Volume for Milvus data

networks:
  app_network:
    driver: bridge
